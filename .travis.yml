language: c
sudo: false
addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise
        packages:
            - clang-3.8
matrix:
    include:
#        - os: linux
#          compiler: gcc
#          env: BUILD_TYPE=normal
#        - os: linux
#          compiler: clang
#          env: BUILD_TYPE=normal
#        - os: linux
#          compiler: gcc
#          env: BUILD_TYPE=coverage
#        - os: linux
#          compiler: clang
#          env: BUILD_TYPE=ubsan
#        - os: linux
#          compiler: clang
#          env: BUILD_TYPE=asan
         - os: linux
           compiler: clang
           env: BUILD_TYPE=msan
#        - os: linux
#          compiler: clang
#          env: BUILD_TYPE=lsan
#        - os: osx
#          compiler: gcc
#          env: BUILD_TYPE=normal
#        - os: osx
#          compiler: clang
#          env: BUILD_TYPE=normal
install:
    - pip install --user 'requests[security]'
    - pip install --user cpp-coveralls
    - wget https://www.w3.org/XML/Test/xmlts20080827.tar.gz
    - tar xf xmlts20080827.tar.gz
before_script:
    - |
         if [ "$TRAVIS_OS_NAME" = "osx" ]; then
             HAVE_EBCDIC=`iconv --list | grep -i ebcdic`
             if [ "$HAVE_EBCDIC" = "" ]; then
                 rm test/*ebcdic*.xml
             fi
         fi
    - |
        if [ "$BUILD_TYPE" = "coverage" ]; then
             export CONFIG_OPTS="--with-coverage"
        fi
    - |
         if [ "$BUILD_TYPE" = "asan" ]; then
             export CONFIG_OPTS="--with-asan --without-python"
             export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-3.4)
         fi
    - |
         if [ "$BUILD_TYPE" = "lsan" ]; then
             export CFLAGS=-fsanitize=leak
             export LDFLAGS=-fsanitize=leak
         fi
    - |
         if [ "$BUILD_TYPE" = "ubsan" ]; then
             export CONFIG_OPTS="--without-python"
             # Use all the parts of UBSAN except bounds checks (parser.c) and unsigned integer overflow (hash.c)
             export UBSAN_FLAGS="-fsanitize=alignment -fsanitize=bool -fsanitize=enum -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero -fsanitize=function -fsanitize=integer-divide-by-zero -fsanitize=null -fsanitize=object-size -fsanitize=return -fsanitize=shift -fsanitize=signed-integer-overflow -fsanitize=unreachable"
             export CFLAGS=$UBSAN_FLAGS
             export LDFLAGS=$UBSAN_FLAGS
         fi
    - |
         if [ "$BUILD_TYPE" = "msan" ]; then
             # Need all libraries to also be instrumented, so skip libz
             export CONFIG_OPTS="--without-python --without-zlib"
             export CFLAGS="-fsanitize=memory -fsanitize-memory-track-origins -g -fno-omit-frame-pointer -O1"
             export LDFLAGS="-fsanitize=memory -fsanitize-memory-track-origins -g -fno-omit-frame-pointer -O1"
             export MSAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-3.8)
             # Force later Clang to work around false positive
             export CC=clang-3.8
             # Also skip EBCDIC tests that pulls in (uninstrumented) iconv()
             rm test/*ebcdic*.xml
         fi
script:
    - which clang
    - which clang-3.8
    - ./autogen.sh $CONFIG_OPTS && make && make check
    - make C14Ntests Catatests Scripttests HTMLtests ModuleTests Patterntests HTMLPushtests XMLPushtests Regexptests Automatatests SAXtests Schemastests Relaxtests Schematrontests Threadtests Validtests VTimingtests XIncludetests XPathtests XPtrtests
    - |
          if [ "$BUILD_TYPE" = "coverage" ]; then
              cpp-coveralls --exclude doc --exclude os400 --exclude-pattern '.*test.*.c' --exclude /usr/include --gcov-options '\-lp'
          fi
